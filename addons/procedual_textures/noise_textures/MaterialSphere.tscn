[gd_scene load_steps=10 format=2]

[ext_resource path="res://addons/procedual_textures/noise_textures/WorleyViewport.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Spatial


var angle = 0.0

func _process(delta):
	angle += delta
	
	$material_sphere.transform.basis = Basis(Vector3(1.0,0.5,0.3).normalized(),angle)
"

[sub_resource type="ViewportTexture" id=3]

resource_local_to_scene = true
flags = 0
viewport_path = NodePath("WorleyViewport")

[sub_resource type="SpatialMaterial" id=4]

resource_local_to_scene = true
render_priority = 0
flags_transparent = false
flags_unshaded = false
flags_vertex_lighting = false
flags_no_depth_test = false
flags_use_point_size = false
flags_world_triplanar = false
flags_fixed_size = false
flags_albedo_tex_force_srgb = false
vertex_color_use_as_albedo = false
vertex_color_is_srgb = false
params_diffuse_mode = 0
params_specular_mode = 0
params_blend_mode = 0
params_cull_mode = 0
params_depth_draw_mode = 0
params_line_width = 1.0
params_point_size = 1.0
params_billboard_mode = 0
params_grow = false
params_use_alpha_scissor = false
albedo_color = Color( 1, 1, 1, 1 )
albedo_texture = SubResource( 3 )
metallic = 0.0
metallic_specular = 0.5
metallic_texture_channel = 0
roughness = 0.0
roughness_texture_channel = 0
emission_enabled = false
normal_enabled = false
rim_enabled = false
clearcoat_enabled = false
anisotropy_enabled = false
ao_enabled = false
depth_enabled = false
subsurf_scatter_enabled = false
transmission_enabled = false
refraction_enabled = false
detail_enabled = false
uv1_scale = Vector3( 1, 1, 1 )
uv1_offset = Vector3( 0, 0, 0 )
uv1_triplanar = false
uv1_triplanar_sharpness = 1.0
uv2_scale = Vector3( 1, 1, 1 )
uv2_offset = Vector3( 0, 0, 0 )
uv2_triplanar = false
uv2_triplanar_sharpness = 1.0
proximity_fade_enable = false
distance_fade_enable = false
_sections_unfolded = [ "Albedo" ]

[sub_resource type="SphereMesh" id=2]

radius = 1.0
height = 2.0
radial_segments = 64
rings = 32
is_hemisphere = false

[sub_resource type="Shader" id=5]

code = "shader_type spatial;
render_mode unshaded, skip_vertex_transform;

uniform sampler2D albedo_texture : hint_albedo;
uniform float depth = 128.0;
uniform vec3 light_dir = vec3(0.0, 1.0, -1.0);

uniform float cloud_density_factor = 5.0;
uniform float cloud_steps = 128.0;

uniform float light_density_factor = 5.0;
uniform float light_steps = 32.0;

varying vec3 pos;
varying vec3 dir;
varying vec3 ldir;
varying vec3 offset;

vec4 texture3d(sampler2D p_texture, vec3 p_uvw) {
	vec3 mod_uvw = mod(p_uvw + offset, 1.0);
	
	float fd = mod_uvw.z * depth;
	float fz = floor(fd);
	
	vec2 uv1 = vec2(mod_uvw.x, (mod_uvw.y + fz) / depth);
	vec2 uv2 = vec2(mod_uvw.x, mod((mod_uvw.y + fz + 1.0) / depth, 1.0));
	
	vec4 col1 = texture(p_texture, uv1);
	vec4 col2 = texture(p_texture, uv2);
	
	return mix(col1, col2, fd - fz);
}

void vertex() {
	// get our pos on the surface of our mesh in model space
	pos = VERTEX;
	
	// make our vertex position
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
	// get our direction for our raymarch
	dir = (inverse(MODELVIEW_MATRIX) * vec4(normalize(VERTEX), 0.0)).xyz;
	
	// and our light dir
	ldir = (inverse(WORLD_MATRIX) * vec4(normalize(light_dir),0.0)).xyz;
	
	// wind..
	offset = vec3(TIME*0.2, 0.0, TIME*0.1);
}

float cloud_density(vec3 p_pos) {
	vec4 worley = texture3d(albedo_texture, p_pos);
	
	// join our octaves
	float value = worley.r + (0.5 * worley.g) + (0.25 * worley.b);
	
	// inverse and clamp
	value = clamp(1.0 - value, 0.0, 1.0);
	
	return value;
}

float light_density(vec3 p_pos) {
	float ld = 0.0;
	float lf = light_density_factor / light_steps;
	
	vec3 p = p_pos;
	vec3 d = sqrt(12.0) * normalize(ldir) / light_steps;
	for(int i = 0; i < int(light_steps); i++) {
		ld += cloud_density(p * 0.5) * lf;
		
		// move towards the light...
		p = p + d;
		
		// still within our cube?
		if (p.x < -1.0 || p.x > 1.0 || p.y < -1.0 || p.y > 1.0 || p.z < -1.0 || p.z > 1.0) {
			break;
		}
	}
	
	return ld;
}

void fragment() {
	vec3 color = vec3(0.0, 0.0, 0.0);
	float alpha = 0.0;
	float transmittance = 1.0;
	float cdf = cloud_density_factor / cloud_steps;
	
	// lets raymarch...
	vec3 p = pos;
	vec3 d = sqrt(12.0) * normalize(dir) / cloud_steps;
	for(int i = 0; i < int(cloud_steps); i++) {
		float density = clamp(cloud_density(p * 0.5), 0.0, 1.0) * cdf;
		
		if (density > 0.001) {
			float ld = light_density(p);
			
			// update our colour
			float ld_exp = exp(-ld);
			color += vec3(ld_exp, ld_exp, ld_exp) * density * transmittance;
			
			// Add to our alpha
			alpha += density;
			transmittance *= 1.0 - density;
		
			// reached the end?
			if (alpha > 1.0) {
				alpha = 1.0;
				break;
			}
		}
		
		// move through our cube
		p = p + d;
		
		// still within our cube?
		if (p.x < -1.0 || p.x > 1.0 || p.y < -1.0 || p.y > 1.0 || p.z < -1.0 || p.z > 1.0) {
			break;
		}
	}
	
	if (alpha > 0.01) {
		// alpha will be applied to our color so reverse apply it
		color = color / alpha;
	}
	
	ALBEDO = clamp(color, 0.0, 1.0);
	ALPHA = alpha;
}

"

[sub_resource type="ViewportTexture" id=6]

resource_local_to_scene = true
flags = 0
viewport_path = NodePath("WorleyViewport")

[sub_resource type="ShaderMaterial" id=7]

resource_local_to_scene = true
render_priority = 0
shader = SubResource( 5 )
shader_param/depth = 5.0
shader_param/light_dir = Vector3( 20, 30, 50 )
shader_param/cloud_density_factor = 20.0
shader_param/cloud_steps = 30.0
shader_param/light_density_factor = 20.0
shader_param/light_steps = 2.0
shader_param/albedo_texture = SubResource( 6 )
_sections_unfolded = [ "shader_param" ]

[sub_resource type="PlaneMesh" id=8]

size = Vector2( 15, 15 )
subdivide_width = 100
subdivide_depth = 100

[node name="Spatial" type="Spatial" index="0"]

script = SubResource( 1 )

[node name="material_sphere" type="MeshInstance" parent="." index="0"]

layers = 1
material_override = SubResource( 4 )
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 2 )
skeleton = NodePath("..")
material/0 = null
_sections_unfolded = [ "Geometry" ]

[node name="Camera" type="Camera" parent="." index="1"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5.15554 )
keep_aspect = 1
cull_mask = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0
doppler_tracking = 0
projection = 0
current = false
fov = 70.0
size = 1.0
near = 0.05
far = 100.0

[node name="WorleyViewport" parent="." index="2" instance=ExtResource( 1 )]

[node name="plane" type="MeshInstance" parent="." index="3"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -4.504 )
layers = 1
material_override = SubResource( 7 )
cast_shadow = 1
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
mesh = SubResource( 8 )
skeleton = NodePath("..")
material/0 = null
_sections_unfolded = [ "Geometry" ]


